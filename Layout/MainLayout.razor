@inherits LayoutComponentBase
@using MudBlazor
@using Blazored.LocalStorage
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<AuthorizeView>
    <Authorizing>
        <MudProgressCircular Indeterminate="true" />
    </Authorizing>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        @if (authChecked)
        {
            <MudLayout>
                <MudSpacer />

                <div style="display: flex; height: calc(100vh - 64px);">
                    @* Sidebar *@
                    <NavMenu />

                    @* Main Content Area *@
                    <MudMainContent Class="main-content-wrapper">
                        <div class="main-content-container">
                            @Body
                        </div>
                    </MudMainContent>
                </div>
            </MudLayout>
        }
        else
        {
            <MudProgressCircular Indeterminate="true" />
        }
    </Authorized>
</AuthorizeView>

<style>
    .main-content-wrapper {
        flex-grow: 1;
        display: flex;
        padding: 10px;
        /* background-color: #f5f5f5; */
        overflow: auto;
    }

    .main-content-container {
        width: 100%;
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        display: flex;
        flex-direction: column;
        overflow: auto;
    } 
</style>

@code {
    private bool authChecked = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authResult = await AuthService.CheckAuth();
            if (authResult == null)
            {
                Navigation.NavigateTo("/mainhome");
            }
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/login");
        }
        finally
        {
            authChecked = true;
        }
    }
}