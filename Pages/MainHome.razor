@page "/mainhome"
@layout LoginLayout
@using WeatherFrontend.Models
@using WeatherFrontend.Services
@using MudBlazor
@inject WeatherService WeatherService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="weather-app">
    <div class="app-header">
        <div class="header-wrapper">
            <div class="app-branding">
                <h1 class="app-title" style="text-decoration-thickness">WeatherNow</h1>
            </div>
            <div class="header-actions">
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" Class="settings-icon" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToLogin">
                    Sign In
                </MudButton>
            </div>
        </div>
    </div>

    <div class="dashboard-content">
        <div class="search-section">
            <div class="search-container">
                <input type="text"
                       class="search-input"
                       placeholder="Enter city name"
                       @bind="searchQuery"
                @onkeyup:preventDefault
                       @onkeyup="HandleKeyPress" />
                <button class="search-button" @onclick="SearchCity">
                    <MudIcon Icon="@Icons.Material.Filled.Search" />
                </button>
            </div>
        </div>

        @if (CurrentWeather != null)
        {
            <div class="weather-grid">
                <div class="current-weather-card">
                    <div class="weather-header">
                        <div class="location-info">
                            <h2 class="city-name">@CurrentWeather.City</h2>
                            <p class="current-date">@DateTime.Now.ToString("MMMM dd, yyyy")</p>
                        </div>
                        <div class="temperature-display">
                            <h1 class="temperature">
                                @CurrentWeather.Temperature<span class="temp-unit"></span>
                            </h1>
                            <p class="weather-condition">
                                @CurrentWeather.Weather @GetWeatherEmoji(CurrentWeather.Weather)
                            </p>
                        </div>
                    </div>

                    <div class="weather-metrics">
                        <div class="metric-item">
                            <MudIcon Icon="@Icons.Material.Filled.WaterDrop" />
                            <div class="metric-details">
                                <span class="metric-label">Humidity</span>
                                <span class="metric-value">@CurrentWeather.Humidity%</span>
                            </div>
                        </div>
                        <div class="metric-item">
                            <MudIcon Icon="@Icons.Material.Filled.Air" />
                            <div class="metric-details">
                                <span class="metric-label">Wind Speed</span>
                                <span class="metric-value">@CurrentWeather.WindSpeed km/h</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="forecast-card">
                    <h3 class="forecast-title">5-Day Forecast</h3>
                    @if (ForecastWeather != null)
                    {
                        <div class="forecast-grid">
                            @foreach (var day in ForecastWeather.DailyForecasts)
                            {
                                <div class="forecast-day-card">
                                    <span class="forecast-day">@day.Date.ToString("ddd")</span>
                                    <span class="forecast-icon">@GetWeatherEmoji(day.Weather)</span>
                                    <span class="forecast-temp">@day.Temperature°C</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<style>
    .weather-app {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        background: linear-gradient(to right, #f5f7fa, #f5f7fa);
        min-height: 100vh;
        color: #2c3e50;
        display: flex;
        flex-direction: column;
        line-height: 1.6;
    }

    .app-header {
        background-color: rgba(255, 255, 255, 0.95);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 15px 20px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .header-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
        width: 100%;
        height: 30px;
    }

    .app-branding {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .app-icon {
        font-size: 36px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .app-title {
        font-size: 26px;
        font-weight: 700;
        margin: 0;
        color: #3742fa;
        letter-spacing: -0.5px;
    }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .search-section {
        max-width: 600px;
        margin: 25px auto;
        padding: 0 20px;
    }

    .search-container {
        display: flex;
        background-color: white;
        border-radius: 40px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }

        .search-container:focus-within {
            box-shadow: 0 4px 20px rgba(102, 126, 234, 0.2);
        }

    .search-input {
        flex-grow: 1;
        background: transparent;
        border: none;
        color: #2c3e50;
        padding: 15px 20px;
        font-size: 16px;
        outline: none;
    }

        .search-input::placeholder {
            color: rgba(102, 126, 234, 0.7);
            transition: color 0.3s ease;
        }

    .search-button {
        background-color: #3742fa;
        border: none;
        color: white;
        padding: 0 20px;
        transition: background-color 0.3s ease;
    }

        .search-button:hover {
            background-color: #4a5bf0;
        }

    .weather-grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 25px;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .current-weather-card {
        background: white;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
        border-radius: 25px;
        padding: 30px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        transition: transform 0.3s ease;
    }

        .current-weather-card:hover {
            transform: translateY(-5px);
        }

    .weather-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .city-name {
        font-size: 32px;
        margin: 0;
        color: #3742fa;
        font-weight: 700;
    }

    .current-date {
        opacity: 0.7;
        margin: 8px 0 0;
        color: #7f8c8d;
        font-size: 14px;
    }

    .temperature {
        font-size: 64px;
        font-weight: 300;
        margin: 0;
        color: #2c3e50;
        line-height: 1.2;
    }

    .temp-unit {
        font-size: 36px;
        margin-left: 8px;
        color: #3742fa;
        vertical-align: super;
    }

    .weather-condition {
        margin: 12px 0 0;
        opacity: 0.9;
        color: #3742fa;
        font-weight: 500;
    }

    .weather-metrics {
        display: flex;
        justify-content: space-between;
        margin-top: 25px;
        background-color: #f1f2f6;
        border-radius: 15px;
        padding: 15px;
    }

    .metric-item {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .metric-details {
        display: flex;
        flex-direction: column;
    }

    .metric-label {
        font-size: 12px;
        opacity: 0.7;
        color: #7f8c8d;
        text-transform: uppercase;
    }

    .forecast-card {
        background: white;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
        border-radius: 25px;
        padding: 30px;
        transition: transform 0.3s ease;
    }

        .forecast-card:hover {
            transform: translateY(-5px);
        }

    .forecast-title {
        margin-top: 0;
        font-size: 22px;
        text-align: center;
        color: #3742fa;
        font-weight: 600;
        margin-bottom: 20px;
    }

    .forecast-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 15px;
    }

    .forecast-day-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        background: #f1f2f6;
        border-radius: 15px;
        padding: 18px;
        text-align: center;
        transition: all 0.3s ease;
    }

        .forecast-day-card:hover {
            background: #e4e6f0;
            transform: scale(1.05);
        }

    .forecast-day {
        font-weight: 600;
        margin-bottom: 10px;
        color: #3742fa;
        text-transform: uppercase;
        font-size: 12px;
    }

    .forecast-icon {
        font-size: 32px;
        margin-bottom: 12px;
        color: #3742fa;
    }

    .forecast-temp {
        color: #2c3e50;
        font-weight: 500;
    }
</style>
@code {
    private string searchQuery = "";
    private WeatherData CurrentWeather { get; set; }
    private ForecastData ForecastWeather { get; set; }
    private bool IsLoading = false;
    private string? locationError = null;
    private int searchCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentLocationWeather();
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchCity();
        }
    }

    private async Task GetCurrentLocationWeather()
    {
        try
        {
            IsLoading = true;
            locationError = null;
            StateHasChanged();

            var location = await JSRuntime.InvokeAsync<GeoLocation>("getCurrentLocation");
            if (location == null)
            {
                locationError = "Unable to retrieve your location. Please enable location services.";
                return;
            }

            CurrentWeather = await WeatherService.GetWeatherByCoordinatesAsync(location.Latitude, location.Longitude);
            if (CurrentWeather == null)
            {
                locationError = "Could not fetch weather data for your location.";
            }
            else
            {
                await GetWeatherForecast();
            }
        }
        catch (Exception ex)
        {
            locationError = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetWeatherForecast()
    {
        try
        {
            var simpleForecasts = await WeatherService.GetWeatherForecastAsync(CurrentWeather.City);
            if (simpleForecasts != null)
            {
                ForecastWeather = new ForecastData
                    {
                        City = CurrentWeather.City,
                        DailyForecasts = simpleForecasts.Select(f => new DailyForecast
                        {
                            Date = DateTime.Parse(f.Date),
                            Temperature = f.Temperature,
                            Weather = f.Weather
                        }).ToList()
                    };
            }
            else
            {
                locationError = "Failed to load forecast.";
            }
        }
        catch (Exception ex)
        {
            locationError = $"Failed to load forecast: {ex.Message}";
        }
    }

    private async Task SearchCity()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        if (searchCount >= 5)
        {
            locationError = "Maximum search limit reached. Please login to continue.";
            return;
        }

        IsLoading = true;
        locationError = null;
        StateHasChanged();

        try
        {
            CurrentWeather = await WeatherService.GetCurrentWeatherAsync(searchQuery);

            if (CurrentWeather == null)
            {
                locationError = $"No weather data found for '{searchQuery}'.";
            }
            else
            {
                await GetWeatherForecast();
                searchCount++;
            }
        }
        catch (Exception ex)
        {
            locationError = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private string GetWeatherEmoji(string weatherCondition)
    {
        if (string.IsNullOrEmpty(weatherCondition))
            return "🌈";

        weatherCondition = weatherCondition.ToLower();

        return weatherCondition switch
        {
            var w when w.Contains("clear") => "☀️",
            var w when w.Contains("few clouds") => "🌤️",
            var w when w.Contains("scattered clouds") => "⛅",
            var w when w.Contains("broken clouds") || w.Contains("clouds") => "☁️",
            var w when w.Contains("overcast") => "☁️",
            var w when w.Contains("mist") || w.Contains("fog") => "🌫️",
            var w when w.Contains("rain") => "🌧️",
            var w when w.Contains("thunder") => "⚡",
            var w when w.Contains("snow") => "❄️",
            _ => "🌈"
        };
    }
}