@page "/history"
@using WeatherFrontend.Services
@inject UserHistoryService UserHistoryService
@inject AuthService AuthService
@using WeatherFrontend.Models

<div class="history-container">
    <h3 class="history-title">Search History</h3>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (userHistory != null)
    {
        <div class="table-container">
            <table class="history-table">
                <thead>
                    <tr>
                        <th class="header-cell">City</th>
                        <th class="header-cell">Temperature</th>
                        <th class="header-cell">Humidity</th>
                        <th class="header-cell">Wind Speed</th>
                        <th class="header-cell">Weather Condition</th>
                        <th class="header-cell">Timestamp</th>
                        <th class="header-cell">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in userHistory)
                    {
                        <tr class="data-row">
                            <td class="data-cell">@item.CityName</td>
                            <td class="data-cell">@item.Temperature</td>
                            <td class="data-cell">@item.Humidity</td>
                            <td class="data-cell">@item.WindSpeed</td>
                            <td class="data-cell">@item.WeatherCondition</td>
                            <td class="data-cell">@item.Timestamp</td>
                            <td class="data-cell">
                                <button class="delete-button" @onclick="() => DeleteHistory(item.Id)">
                                    <span class="trash-icon">🗑</span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="button-container">
            <button class="clear-button" @onclick="ClearHistory">
                <span class="icon">📋</span> CLEAR ALL HISTORY
            </button>
        </div>
    }
    else
    {
        <p>No search history available.</p>
    }
</div>

<style>
    .history-container {
        padding: 40px;
        background-color: white;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px;
    }

    .history-title {
        margin-bottom: 20px;
        color: #333;
        font-weight: normal;
    }

    .table-container {
        overflow-x: auto;
    }

    .history-table {
        width: 100%;
        border-collapse: collapse;
    }

    .header-cell {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #eee;
        color: #673ab7;
        font-weight: bold;
    }

    .data-cell {
        padding: 12px 15px;
        border-bottom: 1px solid #eee;
    }

    .data-row:hover {
        background-color: #f5f5f5;
    }

    .delete-button {
        background: none;
        border: none;
        color: #f44336;
        cursor: pointer;
        padding: 5px;
    }

    .trash-icon {
        font-size: 1.2rem;
    }

    .button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .clear-button {
        background-color: #ff4081;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .clear-button:hover {
            background-color: #f50057;
        }

    .icon {
        font-size: 1.2rem;
    }
</style>

@code {
    private List<UserSearchHistory> userHistory;
    private string UserId;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();
    }

    private async Task LoadHistory()
    {
        isLoading = true;
        try
        {
            var authCheckResponse = await AuthService.CheckAuth();
            if (authCheckResponse != null)
            {
                UserId = authCheckResponse.Id;
                userHistory = await UserHistoryService.GetUserHistory(UserId);
            }
            else
            {
                userHistory = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading history: {ex.Message}");
            userHistory = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteHistory(string historyId)
    {
        if (UserId != null)
        {
            await UserHistoryService.DeleteSearchHistory(historyId, UserId);
            await LoadHistory();
        }
    }

    private async Task ClearHistory()
    {
        if (UserId != null)
        {
            await UserHistoryService.ClearAllUserSearchHistory(UserId);
            await LoadHistory();
        }
    }
}